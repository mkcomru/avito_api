import aiohttp
import asyncio
from app.config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID


class TelegramBotManager:
    def __init__(self):
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    async def send_new_item(self, item_data, description=None, images=None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        
        Args:
            item_data (dict): –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ API –ê–≤–∏—Ç–æ {id, title, price, status, url}
            description (str, optional): –û–ø–∏—Å–∞–Ω–∏–µ —Å –ø–∞—Ä—Å–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            images (list, optional): –°–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            
        Returns:
            dict or None: {message_id: int, has_photo: bool} –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            message_text = self._format_new_item_message(item_data, description)
            
            if images and len(images) > 0:
                message_id = await self._send_photo_message(images[0], message_text)
                has_photo = True
            else:
                message_id = await self._send_text_message(message_text)
                has_photo = False
            
            if message_id:
                print(f"‚úÖ –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: ID {item_data['id']}")
                return {
                    'message_id': message_id,
                    'has_photo': has_photo
                }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ID {item_data['id']}")
                return None
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return None
    
    async def edit_item_status(self, message_id, item_data, new_status, has_photo=False):
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        
        Args:
            message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            item_data (dict): –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {id, title, price, url}
            new_status (str): –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (active, removed, old, blocked, etc.)
            has_photo (bool): True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            updated_text = self._format_updated_item_message(item_data, new_status)
            
            if has_photo:
                success = await self._edit_message_caption(message_id, updated_text)
            else:
                success = await self._edit_message_text(message_id, updated_text)
            
            if success:
                status_emoji = self._get_status_emoji(new_status)
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω {status_emoji}: ID {item_data['id']} -> {new_status}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è ID {item_data['id']}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    def _format_new_item_message(self, item_data, description=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        if item_data.get('price'):
            price_text = f"{item_data['price']:,}".replace(',', ' ') + " ‚ÇΩ"
        else:
            price_text = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        message = f"""üÜï **–ù–û–í–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï**

üìù **{item_data['title']}**

üí∞ **–¶–µ–Ω–∞:** {price_text}
üü¢ **–°—Ç–∞—Ç—É—Å:** –ê–ö–¢–ò–í–ù–û

"""
        
        if description:
            max_desc_length = 500
            if len(description) > max_desc_length:
                short_description = description[:max_desc_length] + "..."
            else:
                short_description = description
            
            message += f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{short_description}\n\n"
        
        if item_data.get('url'):
            message += f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é]({item_data['url']})\n\n"
        
        message += f"üÜî ID: `{item_data['id']}`"
        
        return message
    
    def _format_updated_item_message(self, item_data, new_status):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        if item_data.get('price'):
            price_text = f"{item_data['price']:,}".replace(',', ' ') + " ‚ÇΩ"
        else:
            price_text = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        status_emoji = self._get_status_emoji(new_status)
        status_text = self._get_status_text(new_status)
        
        message = f"""{status_emoji} **{status_text.upper()}**

üìù **{item_data['title']}**

üí∞ **–¶–µ–Ω–∞:** {price_text}
üìä **–°—Ç–∞—Ç—É—Å:** {status_text}

"""
        
        if item_data.get('url'):
            message += f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({item_data['url']})\n\n"
        
        message += f"üÜî ID: `{item_data['id']}`"
        
        return message
    
    def _get_status_emoji(self, status):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        status_emojis = {
            'active': 'üü¢',
            'removed': '‚úÖ',
            'old': '‚úÖ', 
            'blocked': '‚õî',
            'rejected': '‚ùå',
            'removed_from_api': 'üö´'
        }
        return status_emojis.get(status, '‚ùì')
    
    def _get_status_text(self, status):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        status_texts = {
            'active': '–í –ø—Ä–æ–¥–∞–∂–µ',
            'removed': '–ü—Ä–æ–¥–∞–Ω–æ',
            'old': '–ü—Ä–æ–¥–∞–Ω–æ',
            'blocked': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
            'removed_from_api': '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
        }
        return status_texts.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
    
    async def _send_text_message(self, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        url = f"{self.base_url}/sendMessage"
        
        data = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': 'Markdown',
            'disable_web_page_preview': True
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get('ok'):
                        return result['result']['message_id']
                    else:
                        print(f"‚ùå Telegram API –æ—à–∏–±–∫–∞: {result}")
                        return None
                else:
                    error_text = await response.text()
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {response.status} - {error_text}")
                    return None
    
    async def _send_photo_message(self, photo_url, caption):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ"""
        url = f"{self.base_url}/sendPhoto"
        
        data = {
            'chat_id': self.chat_id,
            'photo': photo_url,
            'caption': caption,
            'parse_mode': 'Markdown'
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get('ok'):
                        return result['result']['message_id']
                    else:
                        print(f"‚ùå Telegram API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {result}")
                        print("üîÑ –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
                        return await self._send_text_message(caption)
                else:
                    error_text = await response.text()
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {response.status} - {error_text}")
                    return await self._send_text_message(caption)
    
    async def _edit_message_text(self, message_id, new_text):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url = f"{self.base_url}/editMessageText"
        
        data = {
            'chat_id': self.chat_id,
            'message_id': message_id,
            'text': new_text,
            'parse_mode': 'Markdown',
            'disable_web_page_preview': True
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get('ok'):
                        return True
                    else:
                        print(f"‚ùå Telegram API –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {result}")
                        return False
                else:
                    error_text = await response.text()
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {response.status} - {error_text}")
                    return False
    
    async def _edit_message_caption(self, message_id, new_caption):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ"""
        url = f"{self.base_url}/editMessageCaption"
        
        data = {
            'chat_id': self.chat_id,
            'message_id': message_id,
            'caption': new_caption,
            'parse_mode': 'Markdown'
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get('ok'):
                        return True
                    else:
                        print(f"‚ùå Telegram API –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏: {result}")
                        return False
                else:
                    error_text = await response.text()
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏ {message_id}: {response.status} - {error_text}")
                    return False
    
    async def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É –∏ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º"""
        url = f"{self.base_url}/getMe"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            bot_info = result['result']
                            print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
                            print(f"   –ò–º—è: {bot_info['first_name']}")
                            print(f"   Username: @{bot_info['username']}")
                            print(f"   ID: {bot_info['id']}")
                            return True
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {result}")
                            return False
                    else:
                        error_text = await response.text()
                        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {response.status} - {error_text}")
                        return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
            return False


async def test_telegram_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram Bot Manager"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram Bot Manager...")
    
    bot = TelegramBotManager()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not await bot.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    test_item = {
        'id': 12345678,
        'title': '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - iPhone 12 Pro Max',
        'price': 85000,
        'status': 'active',
        'url': 'https://www.avito.ru/test'
    }
    
    test_description = "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –ü—Ä–æ–¥–∞—é iPhone –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."
    test_images = ['https://via.placeholder.com/300x200?text=Test+Image']
    
    print("\nüì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
    result = await bot.send_new_item(test_item, test_description, test_images)
    
    if result:
        message_id = result['message_id']
        has_photo = result['has_photo']
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å ID: {message_id} (—Å —Ñ–æ—Ç–æ: {has_photo})")
        
        print("\n‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        await asyncio.sleep(3)
        
        print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...")
        success = await bot.edit_item_status(message_id, test_item, 'removed', has_photo)
        
        if success:
            print("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


if __name__ == "__main__":
    asyncio.run(test_telegram_bot())