import os
import random
import time
import re
from selenium.webdriver.common.by import By
from seleniumbase import SB
from loguru import logger
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from app.config import PROXY_SERVER, PROXY_ENABLED


class AvitoPageParser:
    """
    –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –ê–≤–∏—Ç–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–º parser_cls.py
    """
    
    def __init__(self, proxy=None, debug_mode=False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
        
        Args:
            proxy (str): –ü—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ username:password@server:port –∏–ª–∏ None –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ config
            debug_mode (bool): –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ config –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ
        if proxy is None and PROXY_ENABLED:
            self.proxy = PROXY_SERVER
        else:
            self.proxy = proxy
            
        self.debug_mode = debug_mode
        self.user_agents = self._load_user_agents()
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º parser_cls
        self.selectors = {
            'description_full': "[data-marker='item-view/item-description']",
            'images': [
                "img[itemprop='image']",
                ".gallery-img-frame img",
                ".gallery-extended img", 
                "[data-marker='image-frame/image-wrapper'] img",
                ".image-frame img",
                "img[data-marker*='image']"
            ]
        }
        
        logger.info(f"üîß –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–∫—Å–∏: {'–í–∫–ª—é—á–µ–Ω' if self.proxy else '–û—Ç–∫–ª—é—á–µ–Ω'}")
    
    def _load_user_agents(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç user agents –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª —á—Ç–æ –∏ –≤ parser_cls
            ua_files = [
                "user_agent_pc.txt",
                "app/parser_avito/user_agent_pc.txt",
                "parser_avito/user_agent_pc.txt"
            ]
            
            for ua_file in ua_files:
                if os.path.exists(ua_file):
                    with open(ua_file, 'r', encoding='utf-8') as f:
                        agents = [line.strip() for line in f.readlines() if line.strip()]
                    if agents:
                        logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(agents)} user agents –∏–∑ {ua_file}")
                        return agents
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å user agents: {e}")
        
        # Fallback user agents –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        return [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        ]
    
    def ip_block_handler(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ"""
        logger.warning("‚õî –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP")
        if self.proxy:
            logger.info("üîÑ –ü–∞—É–∑–∞ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –ø—Ä–æ–∫—Å–∏ –∞–∫—Ç–∏–≤–µ–Ω")
            time.sleep(random.uniform(30, 60))
        else:
            logger.info("üîÑ –ë–ª–æ–∫ IP. –ü—Ä–æ–∫—Å–∏ –Ω–µ—Ç, —É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞")
            time.sleep(random.uniform(300, 350))
    
    def parse_item_page(self, url):
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        
        Args:
            url (str): URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            
        Returns:
            dict: {'description': str, 'images': list} –∏–ª–∏ None
        """
        if not url:
            logger.error("URL –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            return None
        
        logger.info(f"üîç –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
        
        max_retries = 2
        
        for attempt in range(max_retries + 1):
            try:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º parser_cls
                with SB(uc=True,  # –û–±—Ö–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏
                        headed=True if self.debug_mode else False,
                        headless2=True if not self.debug_mode else False,
                        page_load_strategy="eager",
                        block_images=False,  # –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –æ–Ω–∏ –Ω–∞–º –Ω—É–∂–Ω—ã
                        agent=random.choice(self.user_agents),
                        proxy=self.proxy if self.proxy else None,
                        sjw=False,  # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ç–æ
                        ) as driver:
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    driver.get(url)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
                    if "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in driver.get_title():
                        logger.warning(f"‚õî –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                        if attempt < max_retries:
                            self.ip_block_handler()
                            continue
                        else:
                            return None
                    
                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å–µ–ª–µ–∫—Ç–æ—Ä —á—Ç–æ –∏ –≤ parser_cls –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                        driver.wait_for_element("[data-marker='item-view/total-views']", timeout=10)
                    except Exception:
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                        if "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in driver.get_title():
                            logger.warning("‚õî –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏")
                            if attempt < max_retries:
                                self.ip_block_handler()
                                continue
                            else:
                                return None
                        logger.debug("–ù–µ –¥–æ–∂–¥–∞–ª—Å—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                    
                    # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
                    try:
                        driver.execute_script("window.scrollTo(0, document.body.scrollHeight/3);")
                        time.sleep(random.uniform(1, 2))
                        driver.execute_script("window.scrollTo(0, document.body.scrollHeight/2);")
                        time.sleep(random.uniform(1, 2))
                        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                        time.sleep(random.uniform(1, 2))
                        driver.execute_script("window.scrollTo(0, 0);")
                        time.sleep(random.uniform(1, 2))
                    except Exception:
                        pass
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    result = self._extract_page_data(driver)
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
                    time.sleep(random.uniform(2, 4))
                    
                    return result
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_retries:
                    delay = random.uniform(10, 15)
                    logger.info(f"‚è≥ –ü–∞—É–∑–∞ {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π")
                    time.sleep(delay)
                    continue
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                    return None
        
        return None
    
    def _extract_page_data(self, driver):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        result = {
            'description': None,
            'images': []
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        try:
            description_elements = driver.find_elements(self.selectors['description_full'], by="css selector")
            if description_elements:
                description = description_elements[0].text.strip()
                if description:
                    result['description'] = description
                    logger.success(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    logger.warning("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
            else:
                logger.warning("üìÑ –≠–ª–µ–º–µ–Ω—Ç –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = []
        try:
            for selector in self.selectors['images']:
                try:
                    img_elements = driver.find_elements(selector, by="css selector")
                    for img in img_elements:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        src = (img.get_attribute('src') or 
                              img.get_attribute('data-src') or 
                              img.get_attribute('data-lazy-src') or
                              img.get_attribute('data-original'))
                        
                        if src and src.startswith('http') and src not in images:
                            # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π avito.st –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
                            if 'avito.st' in src:
                                src = re.sub(r'_\d+x\d+', '_1280x960', src)
                            images.append(src)
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")
                    continue
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            result['images'] = list(dict.fromkeys(images))[:15]  # –ú–∞–∫—Å–∏–º—É–º 15 —Ñ–æ—Ç–æ
            logger.success(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(result['images'])}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        
        return result


# –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
_parser_instance = None

def get_parser():
    """–ü–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞"""
    global _parser_instance
    if _parser_instance is None:
        _parser_instance = AvitoPageParser(debug_mode=False)
    return _parser_instance


def parse_avito_photos_and_description(url, proxy=None, debug=False):
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    
    Args:
        url (str): URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        proxy (str): –ü—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ username:password@server:port
        debug (bool): –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä
        
    Returns:
        dict: {'description': str, 'images': list} –∏–ª–∏ None
    """
    try:
        parser = AvitoPageParser(proxy=proxy, debug_mode=debug)
        return parser.parse_item_page(url)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return None


def test_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä...")
    
    # –í–∞—à –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    proxy = PROXY_SERVER if PROXY_ENABLED else None
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ URL
    test_urls = [
        "https://www.avito.ru/amurskaya_oblast_blagoveschensk/predlozheniya_uslug/fotozona_v_arendu_na_gender_pati_7549350435",
        "https://www.avito.ru/moskva/kvartiry/1-k._kvartira_32_m_35_et._2011149284"
    ]
    
    for i, test_url in enumerate(test_urls, 1):
        logger.info(f"\nüìÑ –¢–µ—Å—Ç {i}: {test_url}")
        logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–æ–∫—Å–∏: {proxy}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = AvitoPageParser(proxy=proxy, debug_mode=True)  # True –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        
        # –ü–∞—Ä—Å–∏–º
        result = parser.parse_item_page(test_url)
        
        if result:
            logger.success("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
            
            if result['description']:
                logger.info(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ ({len(result['description'])} —Å–∏–º–≤–æ–ª–æ–≤):")
                logger.info(f"   {result['description'][:200]}...")
            else:
                logger.warning("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            if result['images']:
                logger.info(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(result['images'])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
                for j, img_url in enumerate(result['images'][:3], 1):
                    logger.info(f"   {j}. {img_url}")
            else:
                logger.warning("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        else:
            logger.error("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ—É–¥–∞—á–µ–Ω")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        if i < len(test_urls):
            logger.info("‚è≥ –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏...")
            time.sleep(10)


if __name__ == "__main__":
    test_parser()