import asyncio
import random
import time
from loguru import logger
from ..parser.parser_description_and_photo import get_parser


class AvitoParserAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–º parser_cls.py
    """
    
    def __init__(self):
        self.parser = get_parser()
        logger.info("üîß –ê–¥–∞–ø—Ç–µ—Ä –ø–∞—Ä—Å–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def get_item_details_async(self, item_url):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        
        Args:
            item_url (str): URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            
        Returns:
            tuple: (description, images) –∏–ª–∏ (None, None)
        """
        try:
            logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏: {item_url}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                None, 
                self.parser.parse_item_page, 
                item_url
            )
            
            if result:
                description = result.get('description')
                images = result.get('images', [])
                
                logger.success(f"‚úÖ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã: –æ–ø–∏—Å–∞–Ω–∏–µ - {bool(description)}, —Ñ–æ—Ç–æ - {len(images)}")
                return description, images
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏")
                return None, None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}")
            return None, None
    
    def parse_multiple_items_sync(self, item_urls, delay_range=(5, 8)):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–∞—Ä—Å–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º parser_cls
        
        Args:
            item_urls (list): –°–ø–∏—Å–æ–∫ URL
            delay_range (tuple): –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞–¥–µ—Ä–∂–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
        Returns:
            dict: {url: {'description': str, 'images': list}}
        """
        results = {}
        
        for i, url in enumerate(item_urls, 1):
            logger.info(f"üîç –ü–∞—Ä—Å–∏–º {i}/{len(item_urls)}: {url}")
            
            try:
                result = self.parser.parse_item_page(url)
                results[url] = result if result else {'description': None, 'images': []}
                
                logger.success(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < len(item_urls):
                    delay = random.uniform(*delay_range)
                    logger.debug(f"‚è≥ –ü–∞—É–∑–∞ {delay:.1f} —Å–µ–∫—É–Ω–¥")
                    time.sleep(delay)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")
                results[url] = {'description': None, 'images': []}
        
        return results


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
_adapter_instance = None

def get_parser_adapter():
    """–ü–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    global _adapter_instance
    if _adapter_instance is None:
        _adapter_instance = AvitoParserAdapter()
    return _adapter_instance


async def get_listing_details(item_url):
    """
    –ü—Ä–æ—Å—Ç–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    Args:
        item_url (str): URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        
    Returns:
        tuple: (description, images)
    """
    adapter = get_parser_adapter()
    return await adapter.get_item_details_async(item_url)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∞—à–∏–º monitor.py
def parse_item_for_details(item_url):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    Args:
        item_url (str): URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        
    Returns:
        dict: {'description': str, 'images': list} –∏–ª–∏ None
    """
    parser = get_parser()
    return parser.parse_item_page(item_url)