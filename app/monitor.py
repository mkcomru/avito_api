import asyncio
import sqlite3
from datetime import datetime
import time
from app.avito.get_all_ads import get_all_user_ads
from app.parser.parser_description_and_photo import AvitoPageParser
from app.database.database import DatabaseManager
from app.telegram.bot import TelegramBotManager

class AvitoMonitor:
    def __init__(self):
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
        
        try:
            self.db = DatabaseManager()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
            
        try:
            self.telegram = TelegramBotManager()
            print("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {e}")
            raise
            
        try:
            self.parser = AvitoPageParser()
            print("‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            raise
            
        print("üîß Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    async def run_monitoring_cycle(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å—é —Ä–∞–±–æ—Ç—É
        """
        print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å API –ê–≤–∏—Ç–æ
            print("üì° –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API –ê–≤–∏—Ç–æ...")
            current_ads = self._get_current_ads()
            if not current_ads:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª")
                return
            
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(current_ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å API")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –ë–î
            print("üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã...")
            stored_items = self._get_stored_items()
            print(f"üíæ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(stored_items)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            
            # 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –≤—ã—è–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
            changes = self._compare_ads(current_ads, stored_items)
            
            # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if any(changes.values()):
                print("‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
                await self._process_changes(changes, current_ads, stored_items)
            else:
                print("üò¥ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
            print("‚úÖ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            import traceback
            traceback.print_exc()
    
    def _get_current_ads(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å API –ê–≤–∏—Ç–æ"""
        try:
            print("üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –ê–≤–∏—Ç–æ...")
            ads = get_all_user_ads(status="active,removed,old,blocked,rejected")
            
            if ads is None:
                print("‚ùå API –≤–µ—Ä–Ω—É–ª None")
                return None
            elif len(ads) == 0:
                print("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                return []
            else:
                print(f"‚úÖ API –≤–µ—Ä–Ω—É–ª {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                return ads
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å API: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def _get_stored_items(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("SELECT * FROM items")
                items = [dict(row) for row in cursor.fetchall()]
                return items
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
            return []
    
    def _compare_ads(self, current_ads, stored_items):
        """
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∏ –≤—ã—è–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ç–∏–ø–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ ID –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        current_ids = {ad['id'] for ad in current_ads}
        stored_ids = {item['id'] for item in stored_items}
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        current_ads_dict = {ad['id']: ad for ad in current_ads}
        stored_items_dict = {item['id']: item for item in stored_items}
        
        # –í—ã—è–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        new_ids = current_ids - stored_ids
        removed_ids = stored_ids - current_ids
        common_ids = current_ids & stored_ids
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        status_changed = []
        for item_id in common_ids:
            stored_item = stored_items_dict[item_id]
            current_item = current_ads_dict[item_id]
            
            if stored_item['status'] != current_item['status']:
                status_changed.append({
                    'id': item_id,
                    'old_status': stored_item['status'],
                    'new_status': current_item['status'],
                    'stored_item': stored_item,
                    'current_item': current_item
                })
        
        changes = {
            'new_items': [current_ads_dict[item_id] for item_id in new_ids],
            'removed_items': [stored_items_dict[item_id] for item_id in removed_ids],
            'status_changed': status_changed
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(changes['new_items'])}")
        print(f"   –£–¥–∞–ª–µ–Ω–Ω—ã—Ö –∏–∑ API: {len(changes['removed_items'])}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞: {len(changes['status_changed'])}")
        
        if changes['new_items']:
            for item in changes['new_items']:
                print(f"   üÜï –ù–æ–≤–æ–µ: {item['title'][:50]}... (ID: {item['id']})")
        
        return changes
    
    async def _process_changes(self, changes, current_ads, stored_items):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        
        # 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        for new_item in changes['new_items']:
            await self._handle_new_item(new_item)
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            await asyncio.sleep(2)
        
        # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        for status_change in changes['status_changed']:
            await self._handle_status_change(status_change)
            await asyncio.sleep(1)
        
        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        for removed_item in changes['removed_items']:
            await self._handle_removed_item(removed_item)
            await asyncio.sleep(1)
    
    async def _handle_new_item(self, item_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
        try:
            print(f"üÜï –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {item_data['title'][:50]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ)
            description, images = await self._get_item_details(item_data)
            
            telegram_result = None
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            if item_data['status'] == 'active':
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...")
                telegram_result = await self.telegram.send_new_item(
                    item_data, description, images
                )
            else:
                print(f"‚è∏Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ ({item_data['status']}), –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self._save_item_to_db(item_data, telegram_result)
            
            print(f"‚úÖ –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ID {item_data['id']}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {item_data.get('id', 'unknown')}: {e}")
            import traceback
            traceback.print_exc()
    
    async def _handle_status_change(self, status_change):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            item_id = status_change['id']
            old_status = status_change['old_status']
            new_status = status_change['new_status']
            stored_item = status_change['stored_item']
            current_item = status_change['current_item']
            
            print(f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ ID {item_id}: {old_status} ‚Üí {new_status}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Telegram –µ—Å–ª–∏ –µ—Å—Ç—å message_id
            if stored_item.get('telegram_message_id'):
                has_photo = stored_item.get('has_photo', False)
                success = await self.telegram.edit_item_status(
                    stored_item['telegram_message_id'],
                    current_item,
                    new_status,
                    has_photo
                )
                
                if success:
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Telegram")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Telegram")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self._update_item_status_in_db(item_id, new_status)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def _handle_removed_item(self, stored_item):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–Ω–æ–µ –∏–∑ API"""
        try:
            item_id = stored_item['id']
            print(f"üóëÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ API: ID {item_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Telegram –µ—Å–ª–∏ –µ—Å—Ç—å message_id
            if stored_item.get('telegram_message_id'):
                # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                item_data = {
                    'id': item_id,
                    'title': '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                    'price': None,
                    'url': None
                }
                
                has_photo = stored_item.get('has_photo', False)
                success = await self.telegram.edit_item_status(
                    stored_item['telegram_message_id'],
                    item_data,
                    'removed_from_api',
                    has_photo
                )
                
                if success:
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Telegram")
            
            # –ü–æ–º–µ—á–∞–µ–º –≤ –ë–î –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
            self._update_item_status_in_db(item_id, 'removed_from_api')
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
    
    async def _get_item_details(self, item_data):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ (–æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ)"""
        description = None
        images = None
        
        try:
            if item_data.get('url'):
                print(f"üîç –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {item_data['url']}")
                page_data = self.parser.parse_item_page(item_data['url'])
                
                if page_data:
                    description = page_data.get('description')
                    images = page_data.get('images', [])
                    print(f"üìÑ –ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ: {len(description) if description else 0} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –ê–≤–∏—Ç–æ
                time.sleep(3)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        
        return description, images
    
    def _save_item_to_db(self, item_data, telegram_result):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            telegram_message_id = None
            has_photo = False
            is_posted = False
            
            if telegram_result:
                telegram_message_id = telegram_result['message_id']
                has_photo = telegram_result['has_photo']
                is_posted = True
            
            with sqlite3.connect(self.db.db_path) as conn:
                conn.execute("""
                    INSERT OR REPLACE INTO items 
                    (id, status, telegram_message_id, is_posted_to_telegram, has_photo, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (
                    item_data['id'],
                    item_data['status'],
                    telegram_message_id,
                    is_posted,
                    has_photo,
                    datetime.now(),
                    datetime.now()
                ))
                
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ID {item_data['id']}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
    
    def _update_item_status_in_db(self, item_id, new_status):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                conn.execute("""
                    UPDATE items 
                    SET status = ?, updated_at = ?
                    WHERE id = ?
                """, (new_status, datetime.now(), item_id))
                
            print(f"üíæ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î: ID {item_id} ‚Üí {new_status}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î: {e}")
    
    def get_monitoring_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                cursor = conn.execute("SELECT COUNT(*) FROM items")
                total_items = cursor.fetchone()[0]
                
                # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
                cursor = conn.execute("""
                    SELECT status, COUNT(*) 
                    FROM items 
                    GROUP BY status
                """)
                status_counts = dict(cursor.fetchall())
                
                # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ Telegram
                cursor = conn.execute("""
                    SELECT COUNT(*) 
                    FROM items 
                    WHERE is_posted_to_telegram = 1
                """)
                posted_count = cursor.fetchone()[0]
                
                return {
                    'total_items': total_items,
                    'status_counts': status_counts,
                    'posted_to_telegram': posted_count
                }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def test_monitor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Monitor...")
    
    try:
        monitor = AvitoMonitor()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = monitor.get_monitoring_stats()
        if stats:
            print(f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î: {stats['total_items']}")
            print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {stats['posted_to_telegram']}")
            print(f"   –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º: {stats['status_counts']}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await monitor.run_monitoring_cycle()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞:")
        stats = monitor.get_monitoring_stats()
        if stats:
            print(f"   –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î: {stats['total_items']}")
            print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {stats['posted_to_telegram']}")
            print(f"   –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º: {stats['status_counts']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_monitor())